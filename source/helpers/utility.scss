// UTILITY
// Generate single-declaration utilities.
// -----------------------------------------------------------------------------

// Use as arguments a property name, a set of property values passed via a
// variable, and optionally a property alias. The latter defaults to the
// property name when omitted.
// Pass property values individually, as lists, or via simple maps to generate
// non-responsive utilities.
// Example:
// $margin-right-values: (
//   regular: 1rem
// );
// @include utility(margin-right, $margin-right-values);
// will output:
// .u-margin-right-regular {
//   margin-right: 1rem !important;
// }
// Pass property values via nested maps to generate responsive utilities. Use a
// breakpoint name established via viewport settings to generate responsive
// utilities or the `all` keyword to generate all possible non-responsive and
// responsive utilities.
// Example:
// $margin-right-values: (
//   regular: 1rem,
//   m: (
//     regular: 1rem
//   )
// );
// @include utility(margin-right, $margin-right-values);
// will output:
// .u-margin-right-regular {
//   margin-right: 1rem !important;
// }
// @media screen and (min-width: 720px) {
//   .u-margin-right-regular\@m {
//     margin-right: 1rem !important;
//   }
// }
@mixin utility($property, $values, $property-alias: $property) {
  @if (type-of($values) != map) {
    // Generate non-responsive utilities from single values or lists.
    @each $value in $values {
      .u-#{$property-alias}-#{$value} {
        #{$property}: $value !important;
      }
    }
  } @else {
    // Generate utilities from values passed via maps.
    @each $entry in $values {
      // Get a breakpoint name, a keyword, or a property value alias.
      $key: nth($entry, 1);
      // Get property values accompanied optionally by aliases.
      $key-values: nth($entry, 2);
      @if (map-has-key($breakpoints, $key) or $key == "all") {
        $breakpoint-names: $key;
        @if ($key == "all") {
          $breakpoint-names: join("s", map-keys($breakpoints));
        }
        @each $breakpoint-name in $breakpoint-names {
          $breakpoint-suffix: null;
          @if ($breakpoint-name != "s") {
            $breakpoint-suffix: \@#{$breakpoint-name};
          }
          @include breakpoint($breakpoint-name) {
            @if (type-of($key-values) == map) {
              // Generate responsive utilities designated using property value
              // aliases (e.g., `.u-margin-right-regular@m`).
              @each $value-alias, $value in $key-values {
                .u-#{$property-alias}-#{$value-alias}#{$breakpoint-suffix} {
                  #{$property}: $value !important;
                }
              }
            } @else {
              // Generate responsive utilities designated using property values
              // (e.g., `.u-display-block@m`).
              @each $value in $key-values {
                .u-#{$property-alias}-#{$value}#{$breakpoint-suffix} {
                  #{$property}: $value !important;
                }
              }
            }
          }
        }
      }
      @if (map-has-key($breakpoints, $key) == false and $key != "all") {
        $value-alias: $key;
        $value: $key-values;
        // Generate non-responsive utilities designated using property value
        // aliases outside nested maps (e.g., `.u-margin-right-regular`).
        .u-#{$property-alias}-#{$value-alias} {
          #{$property}: $value !important;
        }
      }
    }
  }
}
